@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using ATCTools.Shared.Models
@using ATCTools.Client.Services
@using System.Net
@using System.Web
@using ATCTools.Client.Models
@using ATCTools.Client.Store
@using Fluxor
@page "/"
@inject HttpClient Http
@inject AerodromeService AerodromeService
@inject IJSRuntime JsRuntime
@inject AirportNameService NameService

<div class="d-flex" style="height: 100%;">
    <div class="d-flex flex-column" style="width: 35%;min-width: 600px;">
        <MudPaper Outlined="true" Class="mt-8 mb-4 ml-8 mr-2 pa-4">
            <EditForm Model="@_plan" OnValidSubmit="@ValidFormSubmitted" @ref="_formRef">
                <DataAnnotationsValidator/>
                <div class="d-flex mb-2">
                    <MudTextField Variant="Variant.Outlined" Label="Departing Airport" Class="mr-2"
                                  Value="_plan.DepartingAirport" For="@(() => _plan.DepartingAirport)"
                                  T="string" ValueChanged="DepartingChanged" Disabled="_loading"
                                  HelperText="@FieldAirportState.Value.DepartingFieldInfo?.AirportName" />
                    <MudTextField Variant="Variant.Outlined" Label="Destination Airport" Class="ml-2"
                                  Value="_plan.DestinationAirport" For="@(() => _plan.DestinationAirport)"
                                  T="string" ValueChanged="DestinationChanged" Disabled="_loading"
                                  HelperText="@FieldAirportState.Value.DestinationFieldInfo?.AirportName" />
                </div>
                <MudRadioGroup @bind-SelectedOption="@_plan.AircraftType" Class="ml-2">
                        <MudRadio Option="@AircraftType.JET" Color="Color.Primary" Disabled="_loading">Jet</MudRadio>
                        <MudRadio Option="@AircraftType.NON_JET" Color="Color.Primary" Disabled="_loading">Non-Jet</MudRadio>
                </MudRadioGroup>
                <MudTextField Variant="Variant.Outlined" Label="Route" Class="mb-2" T="string" Disabled="_loading"
                              Value="_plan.Route" For="@(() => _plan.Route)" ValueChanged="UpdateRouteValue" />
                @if (GeneratedRouteState.Value.Route != null && !string.IsNullOrWhiteSpace(GeneratedRouteState.Value.Route.Message))
                {
                    <MudText Color="Color.Error" Class="pb-4" Align="Align.Center">@GeneratedRouteState.Value.Route.Message</MudText>
                }
                <div class="d-flex justify-space-between">
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Disabled="_loading" Color="Color.Primary" OnClick="GenerateRoute">
                        Generate Route
                        @if (_loading && _loadingRoute)
                        {
                            <MudProgressCircular Class="ml-2" Size="Size.Small" Indeterminate="true"/>
                        }
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Disabled="_loading" Color="Color.Secondary">
                        Validate
                        @if (_loading && _loadingValidation)
                        {
                            <MudProgressCircular Class="ml-2" Size="Size.Small" Indeterminate="true"/>
                        }
                    </MudButton>
                </div>
            </EditForm>
        </MudPaper>
        @if (ClientValidationState.Value.Result != null)
        {
            <MudPaper Outlined="true" Class="mb-8 ml-8 mr-2 pa-4 d-flex flex-column" Style="overflow-y: auto;">
                @if (MetarState.Value.Metar != null)
                {
                    <div class="pb-4">
                        <MudText Typo="Typo.button" Class="mr-2"><b>METAR</b></MudText>
                        <MudText Typo="Typo.button" Align="Align.End">@MetarState.Value.Metar.Metar</MudText>
                    </div>
                    <MudDivider></MudDivider>
                }
                @if (ClientValidationState.Value.Result.AvailableSids.Any() || ClientValidationState.Value.Result.AvailableStars.Any())
                {
                    <MudExpansionPanels Elevation="0" Style="overflow-y:auto; overflow-x:hidden;">
                        @if (ClientValidationState.Value.Result.AvailableSids.Any())
                        {
                            <MudExpansionPanel Text="SIDs" Class="px-expand-panel-header">
                                <MudList Dense="true" Clickable="!_loading" Style="overflow-y: auto;">
                                    @if (ClientValidationState.Value.Result.AvailableSids.Any(s => !string.IsNullOrWhiteSpace(s.RouteWithSid)))
                                    {
                                        <MudListSubheader>Recommended SIDs (Click to apply)</MudListSubheader>
                                        @foreach (var sid in ClientValidationState.Value.Result.AvailableSids.Where(s => !string.IsNullOrWhiteSpace(s.RouteWithSid)))
                                        {
                                            <MudListItem OnClick="() => { _plan.Route = sid.RouteWithSid!; _plan.DepartingAirport = ClientValidationState.Value.Result.DepartingAirport.Segment; _plan.DestinationAirport = ClientValidationState.Value.Result.DestinationAirport.Segment; }">
                                                <MudText Typo="Typo.button">
                                                    <b>
                                                        @sid.Name
                                                        @(sid.IsRadar ? "(RADAR)" : "")
                                                        @(sid.AircraftType == AircraftType.JET ? "(JET)" :
                                                            sid.AircraftType == AircraftType.NON_JET ? "(NON-JET)" : "")
                                                        @sid.Runways
                                                    </b>
                                                </MudText>
                                                <MudText Typo="Typo.overline">
                                                    @sid.Transitions
                                                </MudText>
                                            </MudListItem>
                                        }
                                        <MudDivider/>
                                    }
                                    @foreach (var sid in ClientValidationState.Value.Result.AvailableSids.Where(s => string.IsNullOrWhiteSpace(s.RouteWithSid)))
                                    {
                                        <MudListItem Disabled="true">
                                            <MudText Typo="Typo.button">
                                                <b>
                                                    @sid.Name
                                                    @(sid.IsRadar ? "(RADAR)" : "")
                                                    @(sid.AircraftType == AircraftType.JET ? "(JET)" :
                                                        sid.AircraftType == AircraftType.NON_JET ? "(NON-JET)" : "")
                                                    @sid.Runways
                                                </b>
                                            </MudText>
                                            <MudText Typo="Typo.overline">
                                                @sid.Transitions
                                            </MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudExpansionPanel>
                        }
                        @if (ClientValidationState.Value.Result.AvailableStars.Any())
                        {
                            <MudExpansionPanel Text="STARs" Class="px-expand-panel-header">
                                <MudList Dense="true" Clickable="!_loading" Style="overflow-y: auto;">
                                    @if (ClientValidationState.Value.Result.AvailableStars.Any(s => !string.IsNullOrWhiteSpace(s.RouteWithStar)))
                                    {
                                        <MudListSubheader>Recommended STARs (Click to apply)</MudListSubheader>
                                        @foreach (var star in ClientValidationState.Value.Result.AvailableStars.Where(s => !string.IsNullOrWhiteSpace(s.RouteWithStar)))
                                        {
                                            <MudListItem OnClick="() => { _plan.Route = star.RouteWithStar!; _plan.DepartingAirport = ClientValidationState.Value.Result.DepartingAirport.Segment; _plan.DestinationAirport = ClientValidationState.Value.Result.DestinationAirport.Segment; }">
                                                <MudText Typo="Typo.button">
                                                    <b>
                                                        @star.Name
                                                        @(star.AircraftType == AircraftType.JET ? "(JET)" :
                                                            star.AircraftType == AircraftType.NON_JET ? "(NON-JET)" : "")
                                                        @star.Runways
                                                    </b>
                                                </MudText>
                                                <MudText Typo="Typo.overline">
                                                    @star.Transitions
                                                </MudText>
                                            </MudListItem>
                                        }
                                        <MudDivider/>
                                    }
                                    @foreach (var sid in ClientValidationState.Value.Result.AvailableStars.Where(s => string.IsNullOrWhiteSpace(s.RouteWithStar)))
                                    {
                                        <MudListItem Disabled="true">
                                            <MudText Typo="Typo.button">
                                                <b>
                                                    @sid.Name
                                                    @(sid.AircraftType == AircraftType.JET ? "(JET)" :
                                                        sid.AircraftType == AircraftType.NON_JET ? "(NON-JET)" : "")
                                                    @sid.Runways
                                                </b>
                                            </MudText>
                                            <MudText Typo="Typo.overline">
                                                @sid.Transitions
                                            </MudText>
                                        </MudListItem>
                                    }
                                </MudList>
                            </MudExpansionPanel>
                        }
                    </MudExpansionPanels>
                }
            </MudPaper>
        }
        else if (GeneratedRouteState.Value.DepartingAerodrome != null)
        {
            <MudPaper Outlined="true" Class="mb-8 ml-8 mr-2 pa-4 d-flex flex-column" Style="overflow-y: auto;">
                @if (MetarState.Value.Metar != null)
                {
                    <div class="d-flex justify-space-between flex-wrap pb-4">
                        <MudText Typo="Typo.button" Class="mr-2"><b>METAR</b></MudText>
                        <MudText Typo="Typo.button">@MetarState.Value.Metar.Metar</MudText>
                    </div>
                    <MudDivider></MudDivider>
                }
                @if (GeneratedRouteState.Value.DepartingAerodrome.Sids.Any())
                {
                    <MudExpansionPanels Elevation="0" Style="overflow-y:auto; overflow-x:hidden;">
                        <MudExpansionPanel Text="SIDs" Class="px-expand-panel-header">
                            <MudList Dense="true" Clickable="false" Style="overflow-y: auto;">
                                @foreach (var sid in GeneratedRouteState.Value.DepartingAerodrome.Sids)
                                {
                                    <MudListItem>
                                        <MudText Typo="Typo.button">
                                            <b>
                                                @sid.Name
                                                @(sid.IsRadar ? "(RADAR)" : "")
                                                @(sid.AircraftType switch
                                                {
                                                    AircraftType.JET => "(JET)",
                                                    AircraftType.NON_JET => "(NON-JET)",
                                                    _ => ""
                                                    })
                                                @sid.Runways
                                            </b>
                                        </MudText>
                                        <MudText Typo="Typo.overline">
                                            @sid.Transitions
                                        </MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                }
            </MudPaper>
        }
    </div>
    <MudPaper Outlined="true" Class="my-8 mr-8 ml-2 pa-4 flex-1">
        <div class="d-flex align-center flex-column" style="height: 100%;">
            @if (ClientValidationState.Value.Result == null)
            {
                <MudText Typo="Typo.h4" Class="mt-4 mb-16">Enter a route to validate</MudText>
            }
            else
            {
                <div class="plan-validation-results" style="width: 100%">
                    <div class="d-flex justify-space-between">
                        <div class="d-flex align-center">
                            <MudText Class="plan-segment mr-2" Typo="Typo.h5" Color="@GetStateColor(ClientValidationState.Value.Result.DepartingAirport.State)">@ClientValidationState.Value.Result.DepartingAirport.Segment</MudText>
                            <div class="d-inline-flex flex-column justify-center">
                                @if (ClientValidationState.Value.DepartingInfo != null)
                                {
                                    <MudText Typo="Typo.body2" Color="@GetStateColor(ClientValidationState.Value.Result.DepartingAirport.State)">@ClientValidationState.Value.DepartingInfo.Value.AirportName</MudText>
                                    <MudText Typo="Typo.body2" Color="@GetStateColor(ClientValidationState.Value.Result.DepartingAirport.State)">@ClientValidationState.Value.DepartingInfo.Value.Location</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Error">Aerodrome information not found</MudText>
                                }
                            </div>
                        </div>
                        <div class="d-flex align-center">
                            <div class="d-inline-flex flex-column justify-center align-end">
                                @if (ClientValidationState.Value.DestinationInfo != null)
                                {
                                    <MudText Typo="Typo.body2" Color="@GetStateColor(ClientValidationState.Value.Result.DestinationAirport.State)">@ClientValidationState.Value.DestinationInfo.Value.AirportName</MudText>
                                    <MudText Typo="Typo.body2" Color="@GetStateColor(ClientValidationState.Value.Result.DestinationAirport.State)">@ClientValidationState.Value.DestinationInfo.Value.Location</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Error">Aerodrome information not found</MudText>
                                }
                            </div>
                            <MudText class="plan-segment ml-2" Typo="Typo.h5" Color="@GetStateColor(ClientValidationState.Value.Result.DestinationAirport.State)">@ClientValidationState.Value.Result.DestinationAirport.Segment</MudText>
                        </div>
                    </div>
                    <div class="flex-1 d-flex justify-center my-2">
                        @foreach (var segment in ClientValidationState.Value.Result.SegmentValidationResults)
                        {
                            <div class="d-inline-flex flex-column align-center">
                                <MudText class="plan-segment mx-2" Typo="Typo.body1" Color="@GetStateColor(segment.State)"><b>@segment.Segment</b></MudText>
                                @if (segment.SubInfo != null)
                                {
                                    <MudText class="plan-segment" Typo="Typo.body2" Color="@GetStateColor(segment.State)">@segment.SubInfo</MudText>
                                }
                            </div>
                        }
                        
                        <MudTooltip Text="Copied" ShowOnHover="false" ShowOnFocus="true">
                            <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small"
                                           Title="Copy" OnClick="CopyPlan" tabindex="-1"></MudIconButton>
                        </MudTooltip>
                    </div>
                    <div class="d-flex align-center flex-column mb-2">
                        @if (!string.IsNullOrWhiteSpace(ClientValidationState.Value.Result.DepartingAirport.StateDetails))
                        {
                            <MudText class="validation-message" Color="@GetStateColor(ClientValidationState.Value.Result.DepartingAirport.State)">@ClientValidationState.Value.Result.DepartingAirport.StateDetails</MudText>
                        }
                        @foreach (var segment in ClientValidationState.Value.Result.SegmentValidationResults.Where(s => !string.IsNullOrWhiteSpace(s.StateDetails)))
                        {
                            <MudText class="validation-message" Color="@GetStateColor(segment.State)">@segment.StateDetails</MudText>
                        }
                        @if (!string.IsNullOrWhiteSpace(ClientValidationState.Value.Result.DestinationAirport.StateDetails))
                        {
                            <MudText class="validation-message" Color="@GetStateColor(ClientValidationState.Value.Result.DestinationAirport.State)">@ClientValidationState.Value.Result.DestinationAirport.StateDetails</MudText>
                        }
                        @if (ClientValidationState.Value.Result.DctCollapse != null)
                        {
                            <MudText Typo="Typo.body1"><b>Airway alternative found</b></MudText><br/>
                            <div>
                                <MudText Typo="Typo.overline"><b>@ClientValidationState.Value.Result.DctCollapse</b></MudText>
                                <MudTooltip Text="Copied" ShowOnHover="false" ShowOnFocus="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small"
                                                   Title="Copy" OnClick="CopyCollapsePlan" tabindex="-1"></MudIconButton>
                                </MudTooltip>
                            </div>
                        }
                    </div>
                </div>
                <div class="flex-grow-1" style="width: 100%;" id="route-map"></div>
            }
        </div>
    </MudPaper>
</div>

@code {
    private readonly FlightPlan _plan = new();
    private EditForm? _formRef;
    
    [Inject]
    private IState<FieldAirportState> FieldAirportState { get; set; }
    
    [Inject]
    private IState<ClientValidationState> ClientValidationState { get; set; }
    
    [Inject]
    private IState<MetarState> MetarState { get; set; }
    
    [Inject]
    private IState<GeneratedRouteState> GeneratedRouteState { get; set; }
    
    [Inject]
    private IDispatcher Dispatcher { get; set; }

    private bool _loading;
    private bool _loadingRoute;
    private bool _loadingValidation;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _plan.DepartingAirport = FieldAirportState.Value.DepartingFieldInfo?.IcaoCode ?? AerodromeService.SelectedAerodrome?.Code ?? "";
        _plan.DestinationAirport = FieldAirportState.Value.DestinationFieldInfo?.IcaoCode ?? "";
        _plan.Route = GeneratedRouteState.Value.Route?.Plan ?? "";
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        await NameService.LoadData();
        await DepartingChanged(_plan.DepartingAirport);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender && ClientValidationState.Value.Result != null)
            await GenerateMap(ClientValidationState.Value.Result);
    }

    private void UpdateRouteValue(string val)
    {
        _plan.Route = val.ToUpper();
        Dispatcher.Dispatch(new SetRouteAction(null));
    }

    private async Task CopyPlan()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", string.Join(' ', ClientValidationState.Value.Result!.SegmentValidationResults.Select(s => s.Segment)));
    }

    private async Task CopyCollapsePlan()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", ClientValidationState.Value.Result!.DctCollapse);
    }

    private CancellationTokenSource? _tokenSource;
    private async Task DepartingChanged(string val)
    {
        _plan.DepartingAirport = val.ToUpper();
        Dispatcher.Dispatch(new SetDepartingFieldAction(NameService.GetAirport(val)));
        
        _tokenSource?.Cancel();
        _tokenSource = new CancellationTokenSource();
        
        if (ClientValidationState.Value.Result == null && !string.IsNullOrWhiteSpace(val))
        {
            var result = await Http.GetAsync($"AerodromeSearch/{HttpUtility.UrlEncode(_plan.DepartingAirport)}", _tokenSource.Token);
            var aerodrome = result.StatusCode == HttpStatusCode.OK ? await result.Content.ReadFromJsonAsync<ClientAerodrome>() : null;
            Dispatcher.Dispatch(new SetDepartingAerodromeAction(aerodrome));
            if(aerodrome != null)
                Dispatcher.Dispatch(new SetMetarAction(await Http.GetFromJsonAsync<WeatherData>($"WeatherFetch?code={HttpUtility.UrlEncode(_plan.DepartingAirport)}", _tokenSource.Token)));
        }
        
        StateHasChanged();
    }
    
    private void DestinationChanged(string val)
    {
        _plan.DestinationAirport = val = val.ToUpper();
        Dispatcher.Dispatch(new SetDestinationFieldAction(NameService.GetAirport(val)));
        
        StateHasChanged();
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        _loading = true;
        _loadingValidation = true;
        
        var httpResult = await Http.PostAsJsonAsync("FlightPlanValidation", _plan);
        var result = await httpResult.Content.ReadFromJsonAsync<PlanValidationResult>();

        Dispatcher.Dispatch(new SetMetarAction(await Http.GetFromJsonAsync<WeatherData>($"WeatherFetch?code={HttpUtility.UrlEncode(_plan.DepartingAirport)}")));
        
        StateHasChanged();

        if (result != null)
        {
            Dispatcher.Dispatch(new SetRouteAction(null));
            Dispatcher.Dispatch(new SetValidationResultAction(
                result, 
                NameService.GetAirport(result.DepartingAirport.Segment), 
                NameService.GetAirport(result.DestinationAirport.Segment)));

            await GenerateMap(result);
        }

        DestinationChanged("");
        _plan.Route = "";
        
        _loading = false;
        _loadingValidation = false;
    }

    private async Task GenerateMap(PlanValidationResult result)
    {
        await JsRuntime.InvokeVoidAsync("CreateMap");
            
        await JsRuntime.InvokeVoidAsync("AddLine", 
            result.RouteMap.Select(l => new [] {l.Latitude, l.Longitude}).ToArray(), 
            "var(--mud-palette-success)");

        if (result.DepartingAirport.Location != null)
        {
            await JsRuntime.InvokeVoidAsync("AddWaypoint", 
                result.DepartingAirport.Location!.Latitude, 
                result.DepartingAirport.Location.Longitude, 
                result.DepartingAirport.Segment, 
                "var(--mud-palette-info)");
        }
            
        foreach (var waypoint in result.SegmentValidationResults.Where(s => s.Location != null))
        {
            await JsRuntime.InvokeVoidAsync("AddWaypoint", 
                waypoint.Location!.Latitude, 
                waypoint.Location.Longitude, 
                waypoint.MapCode, 
                waypoint.State switch
                {
                    ValidationState.VALID => "var(--mud-palette-success)",
                    ValidationState.INTERNATIONAL => "var(--mud-palette-info)",
                    ValidationState.WARNING => "var(--mud-palette-warning)",
                    ValidationState.INVALID => "var(--mud-palette-error)",
                    _ => "var(--mud-palette-primary)"
                    });
        }

        if (result.DestinationAirport.Location != null)
        {
            await JsRuntime.InvokeVoidAsync("AddWaypoint", 
                result.DestinationAirport.Location!.Latitude, 
                result.DestinationAirport.Location.Longitude, 
                result.DestinationAirport.Segment, 
                "var(--mud-palette-info)");
        }

        await JsRuntime.InvokeVoidAsync("ScrollToView");
    }

    private Color GetStateColor(ValidationState state) =>
        state switch
        {
            ValidationState.VALID => Color.Success,
            ValidationState.INVALID => Color.Error,
            ValidationState.UNVALIDATED => Color.Default,
            ValidationState.WARNING => Color.Warning,
            ValidationState.INTERNATIONAL => Color.Info,
            _ => throw new ArgumentOutOfRangeException(nameof(state), state, null)
        };
    
    private async Task GenerateRoute()
    {
        if (!string.IsNullOrWhiteSpace(_plan.DepartingAirport) && !string.IsNullOrWhiteSpace(_plan.DestinationAirport))
        {
            _loading = true;
            _loadingRoute = true;
            
            var route = await Http.GetFromJsonAsync<GeneratedRoute>(
                $"RouteSearch?departure={HttpUtility.UrlEncode(_plan.DepartingAirport)}&destination={HttpUtility.UrlEncode(_plan.DestinationAirport)}&type={_plan.AircraftType}");
            if (route is { Success: true })
            {
                _plan.Route = route.Plan;
                Dispatcher.Dispatch(new SetRouteAction(route));
            }
            
            _loading = false;
            _loadingRoute = false;
        }
        else
        {
            _formRef?.EditContext?.NotifyFieldChanged(_formRef!.EditContext.Field("DepartingAirport"));
            _formRef?.EditContext?.NotifyFieldChanged(_formRef!.EditContext.Field("DestinationAirport"));
        }
    }

}
